{"version":3,"sources":["components/cards/Cards.module.css","components/cards/Cards.jsx","api/index.js","components/charts/Charts.jsx","components/countrypicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/charts/Charts.module.css","components/countrypicker/CountryPicker.module.css","Image/COVID.jpg"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","cntry","a","changeUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","country","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legends","display","title","text","CountryPicker","handleCountryChange","setCountry","fetchCountry","FormControl","NativeSelect","defaultValue","onChange","e","target","c","i","key","App","state","fetcheddata","setState","this","image","src","covidImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a307db3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3Fcho\",\"card\":\"Cards_card__oHdK5\",\"infected\":\"Cards_infected__1vyWn\",\"recovered\":\"Cards_recovered__2_T8V\",\"deaths\":\"Cards_deaths__1_VUO\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  // console.log({ confirmed, recovered, deaths, lastUpdate });\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected{\" \"}\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recoveries from covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths caused by covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n// we have asynchronus data\r\nexport const fetchData = async (cntry) => {\r\n  let changeUrl = url;\r\n  if (cntry) {\r\n    changeUrl = `${url}/countries/${cntry}`;\r\n  }\r\n  // if fetch suucessful\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeUrl);\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    // if fetch fails\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    // data here is array\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    //as data is array use map\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    // console.log(response);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Charts.module.css\";\r\n\r\nconst Charts = ({ data: { confirmed, recovered, deaths }, cntry }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  //defining states  initially empty object\r\n  // useeffect accepts a callback\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    // console.log(dailyData);\r\n    fetchAPI();\r\n  });\r\n  // for global daily data\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(200, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 200, 0.5)\",\r\n              \"rgba(0, 200, 0, 0.5)\",\r\n              \"rgba(200, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legends: { display: false },\r\n        title: { display: true, text: `Current Situation in ${cntry}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return <div className={styles.container}>{cntry ? barChart : lineChart}</div>;\r\n};\r\n\r\nexport default Charts;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [country, setCountry] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchCountry = async () => {\r\n      setCountry(await fetchCountries());\r\n    };\r\n\r\n    fetchCountry();\r\n  }, [setCountry]);\r\n  // console.log(country);\r\n  return (\r\n    <FormControl className={styles.FormControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        {/* how options should be */}\r\n        <option value=\"\">Global</option>\r\n        {country.map((c, i) => (\r\n          <option key={i} value={c}>\r\n            {c}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\n\r\nimport Cards from \"./components/cards/Cards\";\r\nimport Charts from \"./components/charts/Charts\";\r\nimport CountryPicker from \"./components/countrypicker/CountryPicker\";\r\n\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api\";\r\nimport covidImage from \"./Image/COVID.jpg\";\r\n\r\nclass App extends React.Component {\r\n  //  constructor state\r\n  state = {\r\n    data: {},\r\n    cntry: \"\",\r\n  };\r\n\r\n  //await needs to wrap in func synchronous\r\n  async componentDidMount() {\r\n    const fetcheddata = await fetchData();\r\n    this.setState({ data: fetcheddata });\r\n  }\r\n  handleCountryChange = async (cntry) => {\r\n    //fetch data\r\n    const fetcheddata = await fetchData(cntry);\r\n    // console.log(fetcheddata);\r\n    //set state\r\n    //  console.log(cntry);\r\n    this.setState({ data: fetcheddata, cntry: cntry });\r\n  };\r\n\r\n  render() {\r\n    const { data, cntry } = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n        <img className={styles.image} src={covidImage} alt=\"covid-Image\" />\r\n        <Cards data={data} />\r\n\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Charts data={data} cntry={cntry} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2w3j4\",\"image\":\"App_image__25lvy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1HErk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormControl\":\"CountryPicker_FormControl__1F5iz\"};","module.exports = __webpack_public_path__ + \"static/media/COVID.cd71d8ef.jpg\";"],"sourceRoot":""}